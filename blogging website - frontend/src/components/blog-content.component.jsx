/**
 * Renders an image block with an optional caption.
 */
const Img = ({ url, caption }) => {
  return (
    <div>
      <img src={url} className="" />
      {caption.length ? (
        <p className="w-full text-center my-3 md:mb-12 text-base text-dark-grey">
          {caption}
        </p>
      ) : (
        ""
      )}
    </div>
  );
};

/**
 * Renders a quote block with an optional caption.
 */
const Quote = ({ quote, caption }) => {
  return (
    <div className="bg-purple/10 p-3 pl-5 border-l-4 border-purple">
      <p>{quote}</p>
      {caption.length ? (
        <p className="w-full text-purple text-base">{caption}</p>
      ) : (
        ""
      )}
    </div>
  );
};

/**
 * Renders a list block, either ordered or unordered.
 */
const List = ({ items, style }) => {
  return (
    <ol
      className={`pl-5 ${style == "ordered" ? " list-decimal" : "list-disc"}`}
    >
      {items.map((listItem, i) => {
        return (
          // Using dangerouslySetInnerHTML because Editor.js can return list items with HTML tags.
          // This should be safe as the content is generated by the user in a controlled editor.
          <li
            className="my-4"
            key={i}
            dangerouslySetInnerHTML={{ __html: listItem }}
          ></li>
        );
      })}
    </ol>
  );
};

/**
 * The main component that determines which block type to render.
 */
const BlogContent = ({ block }) => {
  let { type, data } = block;

  if (type == "paragraph") {
    // Using dangerouslySetInnerHTML to render HTML tags within the paragraph.
    return <p dangerouslySetInnerHTML={{ __html: data.text }}></p>;
  }
  if (type == "header") {
    // Renders different heading levels based on the 'level' property.
    if (data.level == 3) {
      return (
        <h3
          className="text-3xl font-bold"
          dangerouslySetInnerHTML={{ __html: data.text }}
        ></h3>
      );
    } else {
      return (
        <h2
          className="text-4xl font-bold"
          dangerouslySetInnerHTML={{ __html: data.text }}
        ></h2>
      );
    }
  }
  if (type == "image") {
    return <Img url={data.file.url} caption={data.caption} />;
  }
  if (type == "quote") {
    return <Quote quote={data.text} caption={data.caption} />;
  }
  if (type == "list") {
    return <List style={data.style} items={data.items} />;
  }

  // Return null for any unsupported block types.
  return null;
};
export default BlogContent;
